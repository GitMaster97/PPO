apply plugin: 'com.android.application'
// Создаем переменную с именем keystorePropertiesFile и инициализируем ее
// файл keystore.properties в папке rootProject.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Инициализировать новый объект Properties (), называемый keystoreProperties.
def keystoreProperties = new Properties()
// Загрузите файл keystore.properties в объект keystoreProperties.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        signingConfig {
            "${System.env.YOUR_APP_ALIAS}" //keyAlias keystoreProperties['keyAlias']
            "${System.env.YOUR_APP_PW}" //keyPassword keystoreProperties['keyPassword']
            "${System.env.YOUR_APP_PRIVATE_KEY}" //storeFile file(keystoreProperties['storeFile'])
            "${System.env.YOUR_APP_STORE_PW}" //storePassword keystoreProperties['storePassword']
        }
        config {
            keyAlias 'MyAndroidKey'
            keyPassword '070697'
            storeFile file('C:/Users/Miroslav/keystores/android.jks')
            storePassword '070697'
        }
    }
    def getCommitsCount = { ->                      //идентификатор commit
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = stdout
        }
        return stdout.toString().trim().toInteger()
    }

    def getTag = { ->                               //прослеживаемость имени версии
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        def result = stdout.toString().trim().split('-');
        return result[0]+"."+result[1]
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.miroslav.ppo_lab"      //собственное имя при компиляции проекта
        minSdkVersion 23
        targetSdkVersion 28
        versionCode getCommitsCount()
        versionName getTag()
        setProperty("archivesBaseName", "$applicationId-$versionName")  //Вот второй параметр - это имя апк файла, и через $versionName они подставляют значение переменной в строку
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {                                       //убрать неиспользуемые ресурсы конфигурации
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    // Specifies one flavor dimension
    flavorDimensions "version"
    productFlavors {
        general {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".general"
            manifestPlaceholders.screenOrientation = "portrait"         //дополнительные манифесты (manifestPlaceholders)
        }
        dev {
            dimension "version"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            manifestPlaceholders.screenOrientation = "unspecified"      //чтобы использовать переменную в манифесте
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
